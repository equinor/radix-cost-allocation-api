// Code generated by MockGen. DO NOT EDIT.
// Source: models/sql.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	cost_models "github.com/equinor/radix-cost-allocation-api/api/cost/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetLatestRun mocks base method
func (m *MockRepository) GetLatestRun() (cost_models.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRun")
	ret0, _ := ret[0].(cost_models.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRun indicates an expected call of GetLatestRun
func (mr *MockRepositoryMockRecorder) GetLatestRun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRun", reflect.TypeOf((*MockRepository)(nil).GetLatestRun))
}

// GetRunsBetweenTimes mocks base method
func (m *MockRepository) GetRunsBetweenTimes(from, to *time.Time) ([]cost_models.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunsBetweenTimes", from, to)
	ret0, _ := ret[0].([]cost_models.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunsBetweenTimes indicates an expected call of GetRunsBetweenTimes
func (mr *MockRepositoryMockRecorder) GetRunsBetweenTimes(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunsBetweenTimes", reflect.TypeOf((*MockRepository)(nil).GetRunsBetweenTimes), from, to)
}

// CloseDB mocks base method
func (m *MockRepository) CloseDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDB")
}

// CloseDB indicates an expected call of CloseDB
func (mr *MockRepositoryMockRecorder) CloseDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDB", reflect.TypeOf((*MockRepository)(nil).CloseDB))
}
