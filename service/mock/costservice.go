// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/costservice.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	models "github.com/equinor/radix-cost-allocation-api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCostService is a mock of CostService interface.
type MockCostService struct {
	ctrl     *gomock.Controller
	recorder *MockCostServiceMockRecorder
}

// MockCostServiceMockRecorder is the mock recorder for MockCostService.
type MockCostServiceMockRecorder struct {
	mock *MockCostService
}

// NewMockCostService creates a new mock instance.
func NewMockCostService(ctrl *gomock.Controller) *MockCostService {
	mock := &MockCostService{ctrl: ctrl}
	mock.recorder = &MockCostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCostService) EXPECT() *MockCostServiceMockRecorder {
	return m.recorder
}

// GetCostForPeriod mocks base method.
func (m *MockCostService) GetCostForPeriod(from, to time.Time) (*models.ApplicationCostSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCostForPeriod", from, to)
	ret0, _ := ret[0].(*models.ApplicationCostSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostForPeriod indicates an expected call of GetCostForPeriod.
func (mr *MockCostServiceMockRecorder) GetCostForPeriod(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostForPeriod", reflect.TypeOf((*MockCostService)(nil).GetCostForPeriod), from, to)
}

// GetFutureCost mocks base method.
func (m *MockCostService) GetFutureCost(appName string) (*models.ApplicationCost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFutureCost", appName)
	ret0, _ := ret[0].(*models.ApplicationCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFutureCost indicates an expected call of GetFutureCost.
func (mr *MockCostServiceMockRecorder) GetFutureCost(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFutureCost", reflect.TypeOf((*MockCostService)(nil).GetFutureCost), appName)
}
