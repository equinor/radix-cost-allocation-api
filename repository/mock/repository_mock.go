// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	models "github.com/equinor/radix-cost-allocation-api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetContainers mocks base method.
func (m *MockRepository) GetContainers(from, to time.Time) ([]models.ContainerDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers", from, to)
	ret0, _ := ret[0].([]models.ContainerDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainers indicates an expected call of GetContainers.
func (mr *MockRepositoryMockRecorder) GetContainers(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockRepository)(nil).GetContainers), from, to)
}

// GetNodePoolCost mocks base method.
func (m *MockRepository) GetNodePoolCost() ([]models.NodePoolCostDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePoolCost")
	ret0, _ := ret[0].([]models.NodePoolCostDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePoolCost indicates an expected call of GetNodePoolCost.
func (mr *MockRepositoryMockRecorder) GetNodePoolCost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePoolCost", reflect.TypeOf((*MockRepository)(nil).GetNodePoolCost))
}

// GetNodePools mocks base method.
func (m *MockRepository) GetNodePools() ([]models.NodePoolDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePools")
	ret0, _ := ret[0].([]models.NodePoolDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePools indicates an expected call of GetNodePools.
func (mr *MockRepositoryMockRecorder) GetNodePools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePools", reflect.TypeOf((*MockRepository)(nil).GetNodePools))
}
